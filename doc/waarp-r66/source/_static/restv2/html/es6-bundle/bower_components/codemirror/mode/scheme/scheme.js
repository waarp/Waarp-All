// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE
/**
 * Author: Koh Zi Han, based on implementation by Koh Zi Chun
 */(function(mod){if("object"==typeof exports&&"object"==typeof module)// CommonJS
mod(require("../../lib/codemirror"));else if("function"==typeof define&&define.amd)// AMD
define(["../../lib/codemirror"],mod);else// Plain browser env
mod(CodeMirror)})(function(CodeMirror){"use strict";CodeMirror.defineMode("scheme",function(){var BUILTIN="builtin",COMMENT="comment",STRING="string",ATOM="atom",NUMBER="number",BRACKET="bracket",INDENT_WORD_SKIP=2;function makeKeywords(str){for(var obj={},words=str.split(" "),i=0;i<words.length;++i)obj[words[i]]=!0/* ignoreName */ /* skipSlots */;return obj}var keywords=makeKeywords("\u03BB case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"),indentKeys=makeKeywords("define let letrec let* lambda");function stateStack(indent,type,prev){// represents a state stack object
this.indent=indent;this.type=type;this.prev=prev}function pushStack(state,indent,type){state.indentStack=new stateStack(indent,type,state.indentStack)}function popStack(state){state.indentStack=state.indentStack.prev}var binaryMatcher=new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i),octalMatcher=new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i),hexMatcher=new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i),decimalMatcher=new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);function isBinaryNumber(stream){return stream.match(binaryMatcher)}function isOctalNumber(stream){return stream.match(octalMatcher)}function isDecimalNumber(stream,backup){if(!0===backup){stream.backUp(1)}return stream.match(decimalMatcher)}function isHexNumber(stream){return stream.match(hexMatcher)}return{startState:function(){return{indentStack:null,indentation:0,mode:/* eat */ /* ignoreName */!1/* skipSlots */ /* skipSlots */,sExprComment:!1,sExprQuote:!1}},token:function(stream,state){if(null==state.indentStack&&stream.sol()){// update indentation, but only if indentStack is empty
state.indentation=stream.indentation()}// skip spaces
if(stream.eatSpace()){return null}var returnType=null;switch(state.mode){case"string":// multi-line string parsing mode
var next,escaped=!1;while(null!=(next=stream.next())){if("\""==next&&!escaped){state.mode=!1;break}escaped=!escaped&&"\\"==next}returnType=STRING;// continue on in scheme-string mode
break;case"comment":// comment parsing mode
var next,maybeEnd=!1;while(null!=(next=stream.next())){if("#"==next&&maybeEnd){state.mode=!1;break}maybeEnd="|"==next}returnType=COMMENT;break;case"s-expr-comment":// s-expr commenting mode
state.mode=!1;if("("==stream.peek()||"["==stream.peek()){// actually start scheme s-expr commenting mode
state.sExprComment=0}else{// if not we just comment the entire of the next token
stream.eatWhile(/[^\s\(\)\[\]]/);// eat symbol atom
returnType=COMMENT;break}default:// default parsing mode
var ch=stream.next();if("\""==ch){state.mode="string";returnType=STRING}else if("'"==ch){if("("==stream.peek()||"["==stream.peek()){if("number"!=typeof state.sExprQuote){state.sExprQuote=0}// else already in a quoted expression
returnType=ATOM}else{stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);returnType=ATOM}}else if("#"==ch){if(stream.eat("|")){// Multi-line comment
state.mode="comment";// toggle to comment mode
returnType=COMMENT}else if(stream.eat(/[tf]/i)){// #t/#f (atom)
returnType=ATOM}else if(stream.eat(";")){// S-Expr comment
state.mode="s-expr-comment";returnType=COMMENT}else{var numTest=null,hasExactness=!1,hasRadix=!0;if(stream.eat(/[ei]/i)){hasExactness=!0}else{stream.backUp(1);// must be radix specifier
}if(stream.match(/^#b/i)){numTest=isBinaryNumber}else if(stream.match(/^#o/i)){numTest=isOctalNumber}else if(stream.match(/^#x/i)){numTest=isHexNumber}else if(stream.match(/^#d/i)){numTest=isDecimalNumber}else if(stream.match(/^[-+0-9.]/,!1)){hasRadix=!1;numTest=isDecimalNumber;// re-consume the intial # if all matches failed
}else if(!hasExactness){stream.eat("#")}if(null!=numTest){if(hasRadix&&!hasExactness){// consume optional exactness after radix
stream.match(/^#[ei]/i)}if(numTest(stream))returnType=NUMBER}}}else if(/^[-+0-9.]/.test(ch)&&isDecimalNumber(stream,!0)){// match non-prefixed number, must be decimal
returnType=NUMBER}else if(";"==ch){// comment
stream.skipToEnd();// rest of the line is a comment
returnType=COMMENT}else if("("==ch||"["==ch){var keyWord="",indentTemp=stream.column(),letter;/**
                        Either
                        (indent-word ..
                        (non-indent-word ..
                        (;something else, bracket, etc.
                        */while(null!=(letter=stream.eat(/[^\s\(\[\;\)\]]/))){keyWord+=letter}if(0<keyWord.length&&indentKeys.propertyIsEnumerable(keyWord)){// indent-word
pushStack(state,indentTemp+INDENT_WORD_SKIP,ch)}else{// non-indent word
// we continue eating the spaces
stream.eatSpace();if(stream.eol()||";"==stream.peek()){// nothing significant after
// we restart indentation 1 space after
pushStack(state,indentTemp+1,ch)}else{pushStack(state,indentTemp+stream.current().length,ch);// else we match
}}stream.backUp(stream.current().length-1);// undo all the eating
if("number"==typeof state.sExprComment)state.sExprComment++;if("number"==typeof state.sExprQuote)state.sExprQuote++;returnType=BRACKET}else if(")"==ch||"]"==ch){returnType=BRACKET;if(null!=state.indentStack&&state.indentStack.type==(")"==ch?"(":"[")){popStack(state);if("number"==typeof state.sExprComment){if(0==--state.sExprComment){returnType=COMMENT;// final closing bracket
state.sExprComment=!1;// turn off s-expr commenting mode
}}if("number"==typeof state.sExprQuote){if(0==--state.sExprQuote){returnType=ATOM;// final closing bracket
state.sExprQuote=!1;// turn off s-expr quote mode
}}}}else{stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);if(keywords&&keywords.propertyIsEnumerable(stream.current())){returnType=BUILTIN}else returnType="variable"}}return"number"==typeof state.sExprComment?COMMENT:"number"==typeof state.sExprQuote?ATOM:returnType},indent:function(state){if(null==state.indentStack)return state.indentation;return state.indentStack.indent},closeBrackets:{pairs:"()[]{}\"\""},lineComment:";;"}});CodeMirror.defineMIME("text/x-scheme","scheme")});