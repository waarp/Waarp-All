// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE
(function(mod){if("object"==typeof exports&&"object"==typeof module)// CommonJS
mod(require("../../lib/codemirror"),require("../../addon/mode/simple"));else if("function"==typeof define&&define.amd)// AMD
define(["../../lib/codemirror","../../addon/mode/simple"],mod);else// Plain browser env
mod(CodeMirror)})(function(CodeMirror){"use strict";var from="from",fromRegex=/^(\s*)\b(from)\b/i,shells=["run","cmd","entrypoint","shell"],shellsAsArrayRegex=new RegExp("^(\\s*)("+shells.join("|")+")(\\s+\\[)","i"),expose="expose",exposeRegex=new RegExp("^(\\s*)("+expose+")(\\s+)","i"),others=["arg","from","maintainer","label","env","add","copy","volume","user","workdir","onbuild","stopsignal","healthcheck","shell"],instructions=[from,expose].concat(shells).concat(others),instructionRegex="("+instructions.join("|")+")",instructionOnlyLine=new RegExp("^(\\s*)"+instructionRegex+"(\\s*)(#.*)?$","i"),instructionWithArguments=new RegExp("^(\\s*)"+instructionRegex+"(\\s+)","i");CodeMirror.defineSimpleMode("dockerfile",{start:[// Block comment: This is a line starting with a comment
{regex:/^\s*#.*$/,sol:!0/* ignoreName */ /* skipSlots */,token:"comment"},{regex:fromRegex,token:[null,"keyword"],sol:!0,next:"from"},// Highlight an instruction without any arguments (for convenience)
{regex:instructionOnlyLine,token:[null,"keyword",null,"error"],sol:!0},{regex:shellsAsArrayRegex,token:[null,"keyword",null],sol:!0,next:"array"},{regex:exposeRegex,token:[null,"keyword",null],sol:!0,next:"expose"},// Highlight an instruction followed by arguments
{regex:instructionWithArguments,token:[null,"keyword",null],sol:!0,next:"arguments"},{regex:/./,token:null}],from:[{regex:/\s*$/,token:null,next:"start"},{// Line comment without instruction arguments is an error
regex:/(\s*)(#.*)$/,token:[null,"error"],next:"start"},{regex:/(\s*\S+\s+)(as)/i,token:[null,"keyword"],next:"start"},// Fail safe return to start
{token:null,next:"start"}],single:[{regex:/(?:[^\\']|\\.)/,token:"string"},{regex:/'/,token:"string",pop:!0}],double:[{regex:/(?:[^\\"]|\\.)/,token:"string"},{regex:/"/,token:"string",pop:!0}],array:[{regex:/\]/,token:null,next:"start"},{regex:/"(?:[^\\"]|\\.)*"?/,token:"string"}],expose:[{regex:/\d+$/,token:"number",next:"start"},{regex:/[^\d]+$/,token:null,next:"start"},{regex:/\d+/,token:"number"},{regex:/[^\d]+/,token:null},// Fail safe return to start
{token:null,next:"start"}],arguments:[{regex:/^\s*#.*$/,sol:!0,token:"comment"},{regex:/"(?:[^\\"]|\\.)*"?$/,token:"string",next:"start"},{regex:/"/,token:"string",push:"double"},{regex:/'(?:[^\\']|\\.)*'?$/,token:"string",next:"start"},{regex:/'/,token:"string",push:"single"},{regex:/[^#"']+[\\`]$/,token:null},{regex:/[^#"']+$/,token:null,next:"start"},{regex:/[^#"']+/,token:null},// Fail safe return to start
{token:null,next:"start"}],meta:{lineComment:"#"}});CodeMirror.defineMIME("text/x-dockerfile","dockerfile")});