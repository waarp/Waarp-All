<!--
  ~ This file is part of Waarp Project (named also Waarp or GG).
  ~
  ~  Copyright (c) 2019, Waarp SAS, and individual contributors by the @author
  ~  tags. See the COPYRIGHT.txt in the distribution for a full listing of
  ~  individual contributors.
  ~
  ~  All Waarp Project is free software: you can redistribute it and/or
  ~  modify it under the terms of the GNU General Public License as published by
  ~  the Free Software Foundation, either version 3 of the License, or (at your
  ~  option) any later version.
  ~
  ~  Waarp is distributed in the hope that it will be useful, but WITHOUT ANY
  ~  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  ~  A PARTICULAR PURPOSE. See the GNU General Public License for more details.
  ~
  ~  You should have received a copy of the GNU General Public License along with
  ~  Waarp . If not, see <http://www.gnu.org/licenses/>.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <artifactId>WaarpFtp</artifactId>
  <name>Waarp Ftp</name>
  <packaging>pom</packaging>
  <description>
    The Waarp FTP project is a proposal of a new fresh FTP server
    implementation,
    fully in Java according to the following RFC: RFC 959, RFC 775, RFC 2389,
    RFC 2428, RFC 3659.
    It includes also extra commands like XCRC, XMD5, XSHA1, INTERNALSHUTDOWN. It
    is based mainly
    on the NETTY framework (NIO great framework support) and is tend to be
    really efficient, both
    in term of memory, threads and network bandwidth. Bandwidth limitation can
    be configured both
    in store and retrieve, per session (although only one value is set by
    default, but it can be
    changed dynamically if needed) or globally to the server and of course with
    no limitation at
    all if wanted. Limitation should be enough to change the bandwidth behaviour
    for instance
    depending on the time in the day, so as to allow to limit bandwidth usage
    when users are at
    work and in contrary to allow more speed when only batchs are running. The
    specificity of this
    project is you can adapt this software to your particular needs by: changing
    the pre or post
    action on commands (not ony transfer), changing the underlying
    representation of files and
    directories (for instance with database entries), using any particular
    authentication mechanism.
  </description>
  <url>https://github.com/waarp/Waarp-All</url>
  <inceptionYear>2009</inceptionYear>
  <parent>
    <groupId>Waarp</groupId>
    <artifactId>Waarp-All</artifactId>
    <version>${revision}</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <modules>
    <module>core</module>
    <module>filesystem</module>
    <module>simpleimpl</module>
  </modules>

  <dependencies>
    <dependency>
      <groupId>Waarp</groupId>
      <artifactId>WaarpCommon</artifactId>
    </dependency>
    <dependency>
      <groupId>Waarp</groupId>
      <artifactId>WaarpDigest</artifactId>
    </dependency>
    <dependency>
      <groupId>Waarp</groupId>
      <artifactId>WaarpCompression</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-handler</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-buffer</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-codec</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-codec-http</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-codec-dns</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-common</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-handler-proxy</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-resolver</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-resolver-dns</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-resolver-dns-native-macos</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-transport</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-transport-native-epoll</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-transport-native-unix-common</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-transport-native-kqueue</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-tcnative-boringssl-static</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-jaxb-annotations</artifactId>
    </dependency>
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
    </dependency>
    <dependency>
      <groupId>org.dom4j</groupId>
      <artifactId>dom4j</artifactId>
    </dependency>
    <dependency>
      <groupId>jaxen</groupId>
      <artifactId>jaxen</artifactId>
    </dependency>
    <dependency>
      <groupId>xerces</groupId>
      <artifactId>xercesImpl</artifactId>
    </dependency>
    <dependency>
      <groupId>it.sauronsoftware</groupId>
      <artifactId>ftp4j</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <properties>
    <reuseThreadTest>true</reuseThreadTest>
    <module.project>true</module.project>

    <main.basedir>${project.parent.basedir}</main.basedir>
    <waarp.directory.version>org.waarp.ftp.core.utils</waarp.directory.version>
    <waarp.module.version>org/waarp/ftp/core/utils</waarp.module.version>
  </properties>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <reuseForks>false</reuseForks>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>add-license</id>
            <phase>package</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <taskdef resource="net/sf/antcontrib/antlib.xml"/>
                <if>
                  <or>
                    <equals arg2="jar" arg1="${project.packaging}"/>
                    <equals arg2="bundle" arg1="${project.packaging}"/>
                  </or>
                  <then>
                    <move
                      file="${project.build.directory}/${project.build.finalName}.jar"
                      tofile="${project.build.directory}/${project.build.finalName}.orig.jar"/>
                    <zip
                      destfile="${project.build.directory}/${project.build.finalName}.jar"
                      duplicate="preserve">
                      <zipfileset dir="${basedir}" prefix="META-INF/">
                        <include name="LICENSE.*"/>
                        <include name="NOTICE.*"/>
                        <include name="COPYRIGHT.*"/>
                      </zipfileset>
                      <zipfileset dir="${basedir}/license"
                                  prefix="META-INF/license/">
                        <exclude name="**/.*/**"/>
                        <include name="**"/>
                      </zipfileset>
                      <zipfileset dir="${basedir}/../src/main/config/"
                                  prefix="META-INF/config/">
                        <exclude name="**/.*/**"/>
                        <include name="**"/>
                      </zipfileset>
                      <zipfileset filemode="644"
                                  src="${project.build.directory}/${project.build.finalName}.orig.jar"
                                  dirmode="755">
                      </zipfileset>
                    </zip>
                    <delete
                      file="${project.build.directory}/${project.build.finalName}.orig.jar"/>
                    <move
                      file="${project.build.directory}/${project.build.finalName}-sources.jar"
                      tofile="${project.build.directory}/${project.build.finalName}-sources.orig.jar"/>
                    <zip
                      destfile="${project.build.directory}/${project.build.finalName}-sources.jar"
                      duplicate="preserve">
                      <zipfileset dir="${basedir}" prefix="META-INF/">
                        <include name="LICENSE.*"/>
                        <include name="NOTICE.*"/>
                        <include name="COPYRIGHT.*"/>
                        <include name="**/Makefile"/>
                      </zipfileset>
                      <zipfileset dir="${basedir}/license"
                                  prefix="META-INF/license/">
                        <exclude name="**/.*/**"/>
                        <include name="**"/>
                      </zipfileset>
                      <zipfileset dir="${basedir}/../src/main/config/"
                                  prefix="META-INF/config/">
                        <exclude name="**/.*/**"/>
                        <include name="**"/>
                      </zipfileset>
                      <zipfileset filemode="644"
                                  src="${project.build.directory}/${project.build.finalName}-sources.orig.jar"
                                  dirmode="755">
                        <exclude name="**/${filterexclude}/**"/>
                        <include name="**/${filtermodule}/**"/>
                      </zipfileset>
                    </zip>
                    <delete
                      file="${project.build.directory}/${project.build.finalName}-sources.orig.jar"/>
                  </then>
                </if>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
